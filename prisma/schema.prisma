datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  email              String               @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  accounts           Account[]
  sessions           Session[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  username           String?              @unique
  bio                String?
  interests          String[]
  isComplete         Boolean              @default(false)
  newNotifications   Boolean              @default(true)
  Quiz               Quiz[]
  Flashcards         Flashcards[]
  QuizGame           QuizGame[]
  QuizGameStats      QuizGameStats[]
  Following          Follower[]           @relation("Following")
  Followers          Follower[]           @relation("Followers")
  FlashcardsGame     FlashcardsGame[]
  FlashcardQuiz      FlashcardQuiz[]
  FlashcardQuizStats FlashcardQuizStats[]
  Inviter            Invitation[]         @relation("Inviter")
  Invitee            Invitation[]         @relation("Invitee")
  LikedStudy         LikedStudy[]
  Notifications      Notification[]
}

model Follower {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  follower    User     @relation("Following", fields: [followerId], references: [id])
  followingId String   @db.ObjectId
  following   User     @relation("Followers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String       @unique
  image      String
  Quiz       Quiz[]
  Flashcards Flashcards[]
}

type Answer {
  id        String   @default(cuid())
  answer    String
  isCorrect Boolean?
}

type Question {
  id       String   @default(cuid())
  question String
  answers  Answer[]
  points   Int
  time     Int
  image    String
  type     String
}

model Code {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  code       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Quiz       Quiz?
  Flashcards Flashcards?
}

type StatsQuestions {
  played    Int @default(0)
  favorited Int @default(0)
  shared    Int @default(0)
  questions Int @default(0)
}

model Quiz {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  topic          String
  visibility     String
  tags           String[]
  pointsMethod   String
  image          String
  description    String
  collectionName String
  collection     Collection      @relation(fields: [collectionName], references: [name])
  questions      Question[]
  userId         String          @db.ObjectId
  user           User            @relation(fields: [userId], references: [id])
  codeId         String          @unique @db.ObjectId
  code           Code            @relation(fields: [codeId], references: [id])
  stats          StatsQuestions
  quizGame       QuizGame[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  quizGameStats  QuizGameStats[]
  Invitation     Invitation[]
  LikedStudy     LikedStudy[]
  Notifications  Notification[]
}

type Flashcard {
  id         String @default(cuid())
  concept    String
  definition String
}

type StatsFlashcards {
  learned    Int @default(0)
  favorited  Int @default(0)
  shared     Int @default(0)
  flashcards Int @default(0)
}

model Flashcards {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  topic              String
  visibility         String
  tags               String[]
  image              String
  description        String
  flashcards         Flashcard[]
  stats              StatsFlashcards
  collectionName     String
  collection         Collection           @relation(fields: [collectionName], references: [name])
  userId             String               @db.ObjectId
  user               User                 @relation(fields: [userId], references: [id])
  codeId             String               @unique @db.ObjectId
  code               Code                 @relation(fields: [codeId], references: [id])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  FlashcardsGame     FlashcardsGame[]
  FlashcardQuizStats FlashcardQuizStats[]
  Invitation         Invitation[]
  LikedStudy         LikedStudy[]
  Notifications      Notification[]
}

model QuizGame {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  quizId         String          @db.ObjectId
  userId         String          @db.ObjectId
  quiz           Quiz            @relation(fields: [quizId], references: [id])
  user           User            @relation(fields: [userId], references: [id])
  questionsOrder Int[]
  actualQuestion Int
  timeToRespond  DateTime
  points         Int
  correctAnswers Int
  isAsked        Boolean         @default(false)
  isStarted      Boolean         @default(false)
  isFinished     Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  quizGameStats  QuizGameStats[]
}

model QuizGameStats {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId         String   @db.ObjectId
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  quizGameId     String   @unique @db.ObjectId
  quizGame       QuizGame @relation(fields: [quizGameId], references: [id])
  points         Int
  correctAnswers Int
  quiz           Quiz     @relation(fields: [quizId], references: [id])
}

model FlashcardsGame {
  id                  String               @id @default(auto()) @map("_id") @db.ObjectId
  flashcardsId        String               @db.ObjectId
  userId              String               @db.ObjectId
  flashcards          Flashcards           @relation(fields: [flashcardsId], references: [id])
  user                User                 @relation(fields: [userId], references: [id])
  shuffleSalt         Int
  actualFlashcard     Int
  likedIds            String[]
  isEnded             Boolean              @default(false)
  flashcardsQuizStats FlashcardQuizStats[]
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

type FlashcardQuestion {
  id       String   @default(cuid())
  question String
  answers  Answer[]
  time     Int      @default(45)
  type     String
}

model FlashcardQuiz {
  id                 String              @id @default(auto()) @map("_id") @db.ObjectId
  flashcardsId       String              @db.ObjectId
  topic              String
  image              String
  actualQuestion     Int
  questions          FlashcardQuestion[]
  correctAnswers     Int                 @default(0)
  userId             String              @db.ObjectId
  user               User                @relation(fields: [userId], references: [id])
  timeToRespond      DateTime
  isAsked            Boolean             @default(false)
  isStarted          Boolean             @default(false)
  isFinished         Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  FlashcardQuizStats FlashcardQuizStats?
}

model FlashcardQuizStats {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  flashcardsId     String          @db.ObjectId
  userId           String          @db.ObjectId
  user             User            @relation(fields: [userId], references: [id])
  flashcardQuizId  String          @unique @db.ObjectId
  flashcardQuiz    FlashcardQuiz   @relation(fields: [flashcardQuizId], references: [id])
  correctAnswers   Int             @default(0)
  flashcards       Flashcards      @relation(fields: [flashcardsId], references: [id])
  flashcardsGameId String?         @db.ObjectId
  flashcardsGame   FlashcardsGame? @relation(fields: [flashcardsGameId], references: [id])
}

model Invitation {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  type         String
  inviterId    String      @db.ObjectId
  inviteeId    String      @db.ObjectId
  inviter      User        @relation("Inviter", fields: [inviterId], references: [id])
  invitee      User        @relation("Invitee", fields: [inviteeId], references: [id])
  quizId       String?     @db.ObjectId
  quiz         Quiz?       @relation(fields: [quizId], references: [id])
  flashcardsId String?     @db.ObjectId
  flashcards   Flashcards? @relation(fields: [flashcardsId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model LikedStudy {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  type         String
  userId       String      @db.ObjectId
  quizId       String?     @db.ObjectId
  flashcardsId String?     @db.ObjectId
  quiz         Quiz?       @relation(fields: [quizId], references: [id])
  flashcards   Flashcards? @relation(fields: [flashcardsId], references: [id])
  user         User        @relation(fields: [userId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model Notification {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  type         String
  userId       String      @db.ObjectId
  message      String
  senderId     String?     @db.ObjectId
  sender       User?       @relation(fields: [senderId], references: [id])
  quizId       String?     @db.ObjectId
  quiz         Quiz?       @relation(fields: [quizId], references: [id])
  flashcardsId String?     @db.ObjectId
  flashcards   Flashcards? @relation(fields: [flashcardsId], references: [id])
  isRead       Boolean     @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model ConfirmCode {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  code      String   @unique
  userId    String   @db.ObjectId
  deleteAt  DateTime
  isAsked   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
