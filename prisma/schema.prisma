datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId                   String  @db.ObjectId
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.String
  refresh_token_expires_in Int?
  access_token             String? @db.String
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.String
  session_state            String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String       @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  username      String?      @unique
  bio           String?
  interests     String[]
  isComplete    Boolean      @default(false)
  Quiz          Quiz[]
  Flashcards    Flashcards[]
  QuizGame      QuizGame[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String       @unique
  image      String
  Quiz       Quiz[]
  Flashcards Flashcards[]
}

type Answer {
  id        String   @default(cuid())
  answer    String
  isCorrect Boolean?
}

type Question {
  id       String   @default(cuid())
  question String
  answers  Answer[]
  points   Int
  time     Int
  image    String
  type     String
}

model Code {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  code       String      @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  Quiz       Quiz?
  Flashcards Flashcards?
}

type StatsQuestions {
  played    Int @default(0)
  favorited Int @default(0)
  shared    Int @default(0)
  questions Int @default(0)
}

model Quiz {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  topic          String
  visibility     String
  tags           String[]
  pointsMethod   String
  image          String
  description    String
  collectionName String
  collection     Collection     @relation(fields: [collectionName], references: [name])
  questions      Question[]
  userId         String         @db.ObjectId
  user           User           @relation(fields: [userId], references: [id])
  codeId         String         @unique @db.ObjectId
  code           Code           @relation(fields: [codeId], references: [id])
  stats          StatsQuestions
  quizGame       QuizGame[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

type Flashcard {
  concept    String
  definition String
}

type StatsFlashcards {
  learned    Int @default(0)
  favorited  Int @default(0)
  shared     Int @default(0)
  flashcards Int @default(0)
}

model Flashcards {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  topic          String
  visibility     String
  tags           String[]
  image          String
  description    String
  flashcards     Flashcard[]
  stats          StatsFlashcards
  collectionName String
  collection     Collection      @relation(fields: [collectionName], references: [name])
  userId         String          @db.ObjectId
  user           User            @relation(fields: [userId], references: [id])
  codeId         String          @unique @db.ObjectId
  code           Code            @relation(fields: [codeId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
}

model QuizGame {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  quizId         String   @db.ObjectId
  userId         String   @db.ObjectId
  quiz           Quiz     @relation(fields: [quizId], references: [id])
  user           User     @relation(fields: [userId], references: [id])
  questionsOrder Int[]
  actualQuestion Int
  timeToRespond  DateTime
  points         Int
  correctAnswers Int
  isStarted      Boolean  @default(false)
  isFinished     Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}
